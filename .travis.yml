language: node_js

env:
  global:
    - secure: "R7uk+cduLPmjuUyzLCyaYkApE+WNIMrmvCy9cZxGy6N0HwOGnXt8dFgiZs6xB8PkePV2Q1sq0bO6QF8PT4GnnevjQtZb/BvARJtD2VfyI7y10t/hhKkK97Cx55GKKn+4M3hADSKfIphBHe4ZvUvA5gmswDW8AoQ4Lr53/6XK1msAxUa2XZHyg1D1F8jikWmQTcgyEw+8mF0BULWaKbzRhxiOsb2u9YTvBiMph/luf/sSOC18ZDN4MMSJshSq2UTH40Sz/8/ugjEMz7gFvMq+CDmJWYA68KiCuIB0Wx+UT77xzRH1LuIBAusVnkuBvKS83EnIHPjRkZ/5CAjyo5nTLPVwFBUyT1N5Pk8Mwbpe6rmtxqPbjTa0IoM+2WPxjYTbBWcr9HhtTp/sTRdKLLMYuj9aOT+D9LLg+dYepgfFoE84EkVu0eeGxSX+/P7mvaKaWEc/4HTS3AAStzWw5fM++x6zGmy6ru6s9v1wmFq89OYCB9Wrv+MpRjrurYw3C8n/WJR6Qyh7kIu1mjLcYM61axSULe8eET1vR2sAsbvgbwyxZIHHs6Ur1gS4s0cwqALAuuotwDuDAytK5X7MNYsZkJ6dHRw9gz107+ee4HeogW6TnNIip6htaUBPR6e9HGhJrMtK61LznGxyZrfaFqbj9FuI4mat0XJci8OZmFXJn68="
    - secure: "JV6xOo1YVqUUlsa/za7BGuYZj//y5vg7Dgcn6v0MJzF+ZxIM5maGh6iA3mhiCIUetHVwwlqjJg8ZaZ8vFcWRcx27+591xgTSJWrPhgnbqcNupDCGoexiqUUzfgOtkuDowmRp4wz2e5uUpox4Gm6gmJkEt1nUs+/gsk7fjDoChSTGgJ2eASiLgzY2Hg38iT5IiZMx//FWw0uQnYCtPR0vtGYdgT8aSMXnVSsFqvpUJBUnQj4R93eJbQiXUN6SCRpjvd536JOgd+ud+zm7QTvzmRKSgag31XDKNjD/1SK3zzhkfNL/1T7Kr3rCdluxa0RO2c3eLiN6rkjelVtFcRvj7zwJvZ2BJ5WLWILtvbvvCmNzI43v+8RandYiWm8CWxVwUt3Cw+xzG0DblO+TCT8P9DipljI5zOeEBh6Tc920zb0P45E5jnxu6oxS2sOV/K2oyFu5152JXI4u24xVxMeVd9cxOzd4Jpxn5pe/m7RPeEDTpHA28RBTjA98kysR3aUBsfF5I/IrxkT8e9XnMuAOGaVgaAzGRAjL481H8CMIkQT14hO3+jqPKcn1scgDOGxw+Ijujdix9BtVt5/pEokfXYd2KXBmgDAPTBqfgkabPDXoNv0iXDdkQVl0924s0Jq/Io1DbjIIS+zezrPOwryVBsPjRYfWsjwl9Nv1KjK+yeQ="


# enable c++11/14 builds
addons:
  apt:
    sources: [ 'ubuntu-toolchain-r-test' ]
    packages: [ 'libstdc++-4.9-dev' ]

install:
  - node -v
  - which node
  - clang++ -v
  - which clang++
  - make ${BUILDTYPE}

# *Here we run tests*
# We prefer running tests in the 'before_script' section rather than 'script' to ensure fast failure.
# Be aware that if you use the 'script' section it will continue running all commands in the section even if one line fails.
# This is documented at https://docs.travis-ci.com/user/customizing-the-build#Breaking-the-Build
# We don't want this behavior because otherwise we might risk publishing builds when the tests did not pass.
# For this reason, we disable the 'script' section below, since we prefer using 'before_script'.
before_script:
  - npm test

script:
  # after successful tests, publish binaries if specified in commit message
  - ./scripts/publish.sh --TOOLSET=${TOOLSET:-} --debug=$([ "${BUILDTYPE}" == 'debug' ] && echo "true" || echo "false")

# the matrix allows you to specify different operating systems and environments to 
# run your tests and build binaries
matrix:
  include:

    ## ** Builds that are published **

    # linux cfi build node v6/release
    # DISABLED - generated binaries crash immediately, something is missing from this recipe to enable
    #            good error messages
    #- os: linux
    #  env: BUILDTYPE=release TOOLSET=cfi CXXFLAGS="-fsanitize=cfi -fvisibility=hidden" LDFLAGS="-fsanitize=cfi"
    #  node_js: 6
    # linux publishable node v6/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 6
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 6
    # osx publishable node v6/release
    - os: osx
      osx_image: xcode9.2
      env: BUILDTYPE=release
      node_js: 6
    # osx publishable node v6/debug
    - os: osx
      osx_image: xcode9.2
      env: BUILDTYPE=debug
      node_js: 6

    # linux publishable node v6/release
    - os: linux
      env: BUILDTYPE=release
      node_js: 8
    # linux publishable node v6/debug
    - os: linux
      env: BUILDTYPE=debug
      node_js: 8
    # osx publishable node v6/release
    - os: osx
      osx_image: xcode9.2
      env: BUILDTYPE=release
      node_js: 8
    # osx publishable node v6/debug
    - os: osx
      osx_image: xcode9.2
      env: BUILDTYPE=debug
      node_js: 8

    # linux sanitizer build node v6/debug
    - os: linux
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 6
      sudo: required
      # Overrides `install` to set up custom asan flags
      install:
        - make sanitize
      # Overrides `before_script` (tests are already run in `make sanitize`)
      before_script:
    # osx sanitizer build node v6/debug
    - os: osx
      env: BUILDTYPE=debug TOOLSET=asan
      node_js: 6
      sudo: required
      # Overrides `install` to set up custom asan flags
      install:
        - make sanitize
      # Overrides `before_script` (tests are already run in `make sanitize`)
      before_script:

    ## ** Builds that do not get published **
    
    # g++ build (default builds all use clang++)
    - os: linux
      env: BUILDTYPE=debug CXX="g++-6" CC="gcc-6" LINK="g++-6" AR="ar" NM="nm"
      node_js: 6
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-6-dev
            - g++-6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        - make ${BUILDTYPE}
      # Overrides `script` to disable publishing
      script: []
    # Coverage build
    - os: linux
      env: BUILDTYPE=debug CXXFLAGS="--coverage" LDFLAGS="--coverage"
      node_js: 6
      # Overrides `script` to publish coverage data to codecov
      script:
        - export PATH=$(pwd)/mason_packages/.link/bin/:${PATH}
        - which llvm-cov
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
    # Clang format build
    - os: linux
      # can be generic since we don't need nodejs to run formatting
      language: generic
      env: CLANG_FORMAT
      # Overrides `install` to avoid initializing clang toolchain
      install:
        # Run the clang-format script. Any code formatting changes
        # will trigger the build to fail (idea here is to get us to pay attention
        # and get in the habit of running these locally before committing)
        - make format
      # Overrides `before_script`, no need to run tests
      before_script:
      # Overrides `script` to disable publishing
      script:
    # Clang tidy build
    - os: linux
      env: CLANG_TIDY
      node_js: 6
      # Overrides `install` to avoid initializing clang toolchain
      install:
        # First run the clang-tidy target
        # Any code formatting fixes automatically applied by clang-tidy
        # will trigger the build to fail (idea here is to get us to pay attention
        # and get in the habit of running these locally before committing)
        - make tidy
      # Overrides `before_script`, no need to run tests
      before_script:
      # Overrides `script` to disable publishing
      script:
    # Coverage build
    - os: linux
      env: COVERAGE
      node_js: 6
      # Overrides `script` to publish coverage data to codecov
      before_script:
        - make coverage
        - curl -S -f https://codecov.io/bash -o codecov
        - chmod +x codecov
        - ./codecov -x "llvm-cov gcov" -Z
      script:
      install:
